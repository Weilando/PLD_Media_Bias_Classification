"""
Trains a classifier for the PLDs of referenced URLs according to their
political leaning, i.e., left or right.

Example call: python -m pld_classifier_trainer '../../../input_data/left_tweets.csv' '../../../input_data/right_tweets.csv'
"""

import sys
from argparse import ArgumentParser

from data_file_handler import read_tweets_from_csv
from data_preprocessor import build_vocab, build_dataloader, \
                              concatenate_arrays, generate_labels, \
                              preprocess_emos, preprocess_tags
from helpers import print_log
from pld_dataset import PLDDataset

# Main

def parse_arguments(args):
    """ Creates an ArgumentParser with help messages. """
    info =  """ Trainer for a classifier for PLD media bias classification.
            Uses tweets from CSV-files generated by 'data_retriever.py'. """
    parser = ArgumentParser(description=info)
    parser.add_argument('data_l',
                        help="specify relative path to left training data")
    parser.add_argument('data_r',
                        help="specify relative path to right training data")
    parser.add_argument('-b', '--batch', type=int, default=43, metavar='N',
                        help="specify number of samples per batch")
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help="activate output")

    if len(args) < 1:  # show help, if no arguments are given
        parser.print_help(sys.stderr)
        sys.exit()
    return parser.parse_args(args)

def main(args):
    parsed_args = parse_arguments(args)

    l_pld_ls, l_tweet_cnt_ls, l_emos_pos_ls, l_emos_neg_ls, l_tags_ls, _ \
        = read_tweets_from_csv(parsed_args.data_l, parsed_args.verbose)
    r_pld_ls, r_tweet_cnt_ls, r_emos_pos_ls, r_emos_neg_ls, r_tags_ls, _ \
        = read_tweets_from_csv(parsed_args.data_r, parsed_args.verbose)

    l_label_arr = generate_labels(len(l_pld_ls), left=True)
    r_label_arr = generate_labels(len(r_pld_ls), left=False)
    l_emos_arr = preprocess_emos(l_emos_pos_ls, l_emos_neg_ls)
    r_emos_arr = preprocess_emos(r_emos_pos_ls, r_emos_neg_ls)
    l_tag_str_arr = preprocess_tags(l_tags_ls)
    r_tag_str_arr = preprocess_tags(r_tags_ls)

    label_arr = concatenate_arrays(l_label_arr, r_label_arr)
    emos_arr = concatenate_arrays(l_emos_arr, r_emos_arr)
    tags_str_arr = concatenate_arrays(l_tag_str_arr, r_tag_str_arr)
    pld_dataset = PLDDataset(label_arr, emos_arr, tags_str_arr)

    vocab, tokenizer = build_vocab(l_tag_str_arr, r_tag_str_arr)
    dataloader = build_dataloader(pld_dataset, parsed_args.batch, vocab,
                                  tokenizer)

    print_log("Pre-processing done.", parsed_args.verbose)


if __name__ == '__main__':
    main(sys.argv[1:])
